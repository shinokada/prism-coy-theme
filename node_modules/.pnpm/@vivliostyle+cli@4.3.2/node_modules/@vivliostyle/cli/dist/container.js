"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runContainer = exports.checkContainerEnvironment = exports.collectVolumeArgs = exports.toContainerPath = exports.CONTAINER_ROOT_DIR = exports.CONTAINER_IMAGE = void 0;
const chalk_1 = __importDefault(require("chalk"));
const command_exists_1 = __importDefault(require("command-exists"));
const execa_1 = __importDefault(require("execa"));
const fs_1 = __importDefault(require("fs"));
const is_interactive_1 = __importDefault(require("is-interactive"));
const process_1 = __importDefault(require("process"));
const upath_1 = __importDefault(require("upath"));
const url_1 = require("url");
const const_1 = require("./const");
const util_1 = require("./util");
exports.CONTAINER_IMAGE = `ghcr.io/vivliostyle/cli:${const_1.cliVersion}`;
exports.CONTAINER_ROOT_DIR = '/data';
function toContainerPath(urlOrAbsPath) {
    if (util_1.isUrlString(urlOrAbsPath)) {
        if (urlOrAbsPath.toLowerCase().startsWith('file')) {
            return url_1.pathToFileURL(upath_1.default.posix.join(exports.CONTAINER_ROOT_DIR, upath_1.default.toUnix(url_1.fileURLToPath(urlOrAbsPath)).replace(/^\w:/, ''))).href;
        }
        else {
            return urlOrAbsPath;
        }
    }
    return upath_1.default.posix.join(exports.CONTAINER_ROOT_DIR, upath_1.default.toUnix(urlOrAbsPath).replace(/^\w:/, ''));
}
exports.toContainerPath = toContainerPath;
function collectVolumeArgs(mountPoints) {
    return mountPoints
        .filter((p, i, array) => {
        if (i !== array.indexOf(p)) {
            // duplicated path
            return false;
        }
        let parent = p;
        while (parent !== upath_1.default.dirname(parent)) {
            parent = upath_1.default.dirname(parent);
            if (array.includes(parent)) {
                // other mount point contains its directory
                return false;
            }
        }
        return true;
    })
        .map((p) => `${p}:${toContainerPath(p)}`);
}
exports.collectVolumeArgs = collectVolumeArgs;
function checkContainerEnvironment() {
    return fs_1.default.existsSync('/opt/vivliostyle-cli/.vs-cli-version');
}
exports.checkContainerEnvironment = checkContainerEnvironment;
async function runContainer({ image, userVolumeArgs, commandArgs, entrypoint, }) {
    var _a, _b;
    if (!(await command_exists_1.default('docker'))) {
        throw new Error(`Docker isn't be installed. To use this feature, you'll need to install Docker.`);
    }
    util_1.stopLogging('Launching docker container', 'ðŸ“¦');
    const args = [
        'run',
        ...(is_interactive_1.default() ? ['-it'] : []),
        '--rm',
        ...(entrypoint ? ['--entrypoint', entrypoint] : []),
        ...(process_1.default.env.DEBUG
            ? ['-e', `DEBUG=${process_1.default.env.DEBUG}`] // escape seems to work well
            : []),
        ...userVolumeArgs.flatMap((arg) => ['-v', arg]),
        image,
        ...commandArgs,
    ];
    util_1.debug(`docker ${args.join(' ')}`);
    try {
        const proc = execa_1.default('docker', args, {
            stdio: 'inherit',
        });
        (_a = proc.stdout) === null || _a === void 0 ? void 0 : _a.pipe(process_1.default.stdout);
        (_b = proc.stderr) === null || _b === void 0 ? void 0 : _b.pipe(process_1.default.stderr);
        const ret = await proc;
        util_1.startLogging();
        return ret;
    }
    catch (error) {
        util_1.log(`\n${chalk_1.default.red.bold('Error:')} An error occurred on the running container. Please see logs above.`);
        process_1.default.exit(1);
    }
}
exports.runContainer = runContainer;
//# sourceMappingURL=container.js.map