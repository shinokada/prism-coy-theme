export declare const publicationSchemas: readonly [{
    $schema: string;
    $id: string;
    title: string;
    type: string;
    pattern: string;
}, {
    $schema: string;
    $id: string;
    title: string;
    type: string;
    items: {
        const: string;
    }[];
    additionalItems: {
        anyOf: ({
            type: string;
            properties?: undefined;
            required?: undefined;
        } | {
            type: string;
            properties: {
                language: {
                    $ref: string;
                };
                direction: boolean;
            };
            required: string[];
        } | {
            type: string;
            properties: {
                direction: {
                    type: string;
                    enum: string[];
                };
                language: boolean;
            };
            required: string[];
        } | {
            type: string;
            properties: {
                language: {
                    $ref: string;
                };
                direction: {
                    type: string;
                    enum: string[];
                };
            };
            required: string[];
        } | {
            type: string;
            properties: {
                language: boolean;
                direction: boolean;
            };
            required?: undefined;
        })[];
    };
}, {
    $schema: string;
    $id: string;
    title: string;
    type: string;
    properties: {
        name: {
            $ref: string;
        };
        id: {
            $ref: string;
        };
        type: {
            oneOf: ({
                type: string;
                enum: string[];
                default: string;
                items?: undefined;
                contains?: undefined;
            } | {
                type: string;
                items: {
                    type: string;
                };
                contains: {
                    enum: string[];
                };
                enum?: undefined;
                default?: undefined;
            })[];
        };
        url: {
            $ref: string;
        };
        identifier: {
            type: string;
            items: {
                type: string;
            };
        };
    };
    required: string[];
}, {
    $schema: string;
    $id: string;
    title: string;
    anyOf: ({
        type: string;
        items?: undefined;
        $ref?: undefined;
    } | {
        type: string;
        items: {
            anyOf: ({
                type: string;
                $ref?: undefined;
            } | {
                $ref: string;
                type?: undefined;
            })[];
        };
        $ref?: undefined;
    } | {
        $ref: string;
        type?: undefined;
        items?: undefined;
    })[];
}, {
    $schema: string;
    $id: string;
    title: string;
    type: string;
    format: string;
}, {
    $schema: string;
    $id: string;
    title: string;
    type: string;
    pattern: string;
}, {
    $schema: string;
    $id: string;
    title: string;
    oneOf: ({
        $ref: string;
        type?: undefined;
        items?: undefined;
    } | {
        type: string;
        items: {
            $ref: string;
        };
        $ref?: undefined;
    })[];
}, {
    $schema: string;
    $id: string;
    title: string;
    type: string;
    properties: {
        type: {
            oneOf: ({
                type: string;
                const: string;
                items?: undefined;
                contains?: undefined;
            } | {
                type: string;
                items: {
                    type: string;
                };
                contains: {
                    const: string;
                };
                const?: undefined;
            })[];
        };
        itemListElement: {
            type: string[];
            items: {
                type: string;
            };
        };
    };
    required: string[];
}, {
    $schema: string;
    $id: string;
    title: string;
    oneOf: ({
        $ref: string;
        type?: undefined;
        items?: undefined;
    } | {
        type: string;
        items: {
            $ref: string;
        };
        $ref?: undefined;
    })[];
}, {
    $schema: string;
    $id: string;
    title: string;
    type: string;
    properties: {
        type: {
            oneOf: ({
                type: string;
                const: string;
                items?: undefined;
                contains?: undefined;
            } | {
                type: string;
                items: {
                    type: string;
                };
                contains: {
                    const: string;
                };
                const?: undefined;
            })[];
        };
        url: {
            $ref: string;
        };
        encodingFormat: {
            type: string;
        };
        name: {
            $ref: string;
        };
        description: {
            anyOf: ({
                type: string;
                $ref?: undefined;
            } | {
                $ref: string;
                type?: undefined;
            })[];
        };
        rel: {
            type: string[];
            items: {
                type: string;
            };
        };
        integrity: {
            type: string;
        };
        duration: {
            $ref: string;
        };
        alternate: {
            $ref: string;
        };
    };
    required: string[];
}, {
    $schema: string;
    $id: string;
    title: string;
    type: string;
    properties: {
        value: {
            type: string;
        };
        language: {
            $ref: string;
        };
    };
    required: string[];
}, {
    $schema: string;
    $id: string;
    title: string;
    anyOf: ({
        type: string;
        items?: undefined;
        $ref?: undefined;
    } | {
        type: string;
        items: {
            anyOf: ({
                type: string;
                $ref?: undefined;
            } | {
                $ref: string;
                type?: undefined;
            })[];
        };
        $ref?: undefined;
    } | {
        $ref: string;
        type?: undefined;
        items?: undefined;
    })[];
}, {
    $schema: string;
    $id: string;
    title: string;
    oneOf: ({
        oneOf: {
            $ref: string;
        }[];
        type?: undefined;
        items?: undefined;
        uniqueItems?: undefined;
    } | {
        type: string;
        items: {
            anyOf: {
                $ref: string;
            }[];
        };
        uniqueItems: boolean;
        oneOf?: undefined;
    })[];
}, {
    $schema: string;
    $id: string;
    title: string;
    type: string[];
    items: {
        type: string;
    };
}, {
    $schema: string;
    $id: string;
    title: string;
    type: string;
    format: string;
}, {
    $schema: string;
    $id: string;
    title: string;
    oneOf: ({
        type: string;
        format: string;
        items?: undefined;
    } | {
        type: string;
        items: {
            type: string;
            format: string;
        };
        format?: undefined;
    })[];
}, {
    $schema: string;
    $id: string;
    title: string;
    type: string;
    properties: {
        "@context": {
            $ref: string;
        };
        type: {
            type: string[];
            items: {
                type: string;
            };
        };
        conformsTo: {
            oneOf: ({
                $ref: string;
                type?: undefined;
                items?: undefined;
            } | {
                type: string;
                items: {
                    $ref: string;
                };
                $ref?: undefined;
            })[];
        };
        id: {
            type: string;
        };
        abridged: {
            type: string;
        };
        accessMode: {
            $ref: string;
        };
        accessModeSufficient: {
            $ref: string;
        };
        accessibilityFeature: {
            $ref: string;
        };
        accessibilityHazard: {
            $ref: string;
        };
        accessibilitySummary: {
            $ref: string;
        };
        artist: {
            $ref: string;
        };
        author: {
            $ref: string;
        };
        colorist: {
            $ref: string;
        };
        contributor: {
            $ref: string;
        };
        creator: {
            $ref: string;
        };
        editor: {
            $ref: string;
        };
        illustrator: {
            $ref: string;
        };
        inker: {
            $ref: string;
        };
        letterer: {
            $ref: string;
        };
        penciler: {
            $ref: string;
        };
        publisher: {
            $ref: string;
        };
        readBy: {
            $ref: string;
        };
        translator: {
            $ref: string;
        };
        url: {
            $ref: string;
        };
        duration: {
            $ref: string;
        };
        inLanguage: {
            $ref: string;
        };
        dateModified: {
            $ref: string;
        };
        datePublished: {
            $ref: string;
        };
        name: {
            $ref: string;
        };
        readingOrder: {
            $ref: string;
        };
        resources: {
            $ref: string;
        };
        links: {
            $ref: string;
        };
    };
    required: string[];
}];
export declare const publicationSchemaId: string;
//# sourceMappingURL=pubManifest.schema.d.ts.map