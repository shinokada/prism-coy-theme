"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTocHtml = exports.processManuscriptHtml = exports.generateTocHtml = void 0;
const cheerio_1 = __importDefault(require("cheerio"));
const fs_1 = __importDefault(require("fs"));
const hast_util_to_html_1 = __importDefault(require("hast-util-to-html"));
const hastscript_1 = __importDefault(require("hastscript"));
const prettier_1 = __importDefault(require("prettier"));
const upath_1 = __importDefault(require("upath"));
function generateTocHtml({ entries, manifestPath, distDir, title, tocTitle, style, }) {
    const items = entries.map((entry) => hastscript_1.default('li', hastscript_1.default('a', { href: encodeURI(upath_1.default.relative(distDir, entry.target)) }, entry.title || upath_1.default.basename(entry.target, '.html'))));
    const toc = hastscript_1.default('html', hastscript_1.default('head', ...[
        hastscript_1.default('title', title !== null && title !== void 0 ? title : ''),
        hastscript_1.default('link', {
            href: encodeURI(upath_1.default.relative(distDir, manifestPath)),
            rel: 'publication',
            type: 'application/ld+json',
        }),
        style && hastscript_1.default('link', { href: style, rel: 'stylesheet' }),
    ].filter((n) => !!n)), hastscript_1.default('body', hastscript_1.default('h1', title || ''), hastscript_1.default('nav#toc', { role: 'doc-toc' }, hastscript_1.default('h2', tocTitle), hastscript_1.default('ol', items))));
    return prettier_1.default.format(hast_util_to_html_1.default(toc), { parser: 'html' });
}
exports.generateTocHtml = generateTocHtml;
function processManuscriptHtml(filepath, { title, style, contentType, language, }) {
    const $ = cheerio_1.default.load(fs_1.default.readFileSync(filepath, 'utf8'), {
        xmlMode: contentType === 'application/xhtml+xml',
    });
    if (title) {
        if (!$('title')) {
            $('head').append($('<title></title>'));
        }
        $('title').text(title);
    }
    if (style) {
        $('head').append(`<link rel="stylesheet" />`);
        $('head > *:last-child').attr('href', style);
    }
    if (language) {
        if (contentType === 'application/xhtml+xml') {
            if (!$('html').attr('xml:lang')) {
                $('html').attr('lang', language);
                $('html').attr('xml:lang', language);
            }
        }
        else {
            if (!$('html').attr('lang')) {
                $('html').attr('lang', language);
            }
        }
    }
    let processed = $.html();
    return processed;
}
exports.processManuscriptHtml = processManuscriptHtml;
function isTocHtml(filepath) {
    try {
        const $ = cheerio_1.default.load(fs_1.default.readFileSync(filepath, 'utf8'));
        return ($('[role="doc-toc"], [role="directory"], nav, .toc, #toc').length > 0);
    }
    catch (err) {
        // seems not to be a html file
        return false;
    }
}
exports.isTocHtml = isTocHtml;
//# sourceMappingURL=html.js.map