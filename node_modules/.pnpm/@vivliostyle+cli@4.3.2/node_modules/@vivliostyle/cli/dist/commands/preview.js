"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const chokidar_1 = __importDefault(require("chokidar"));
const upath_1 = __importDefault(require("upath"));
const browser_1 = require("../browser");
const builder_1 = require("../builder");
const config_1 = require("../config");
const server_1 = require("../server");
const util_1 = require("../util");
const preview_parser_1 = require("./preview.parser");
let timer;
try {
    const program = preview_parser_1.setupPreviewParserProgram();
    program.parse(process.argv);
    const options = program.opts();
    preview({
        input: (_a = program.args) === null || _a === void 0 ? void 0 : _a[0],
        configPath: options.config,
        theme: options.theme,
        size: options.size,
        style: options.style,
        userStyle: options.userStyle,
        singleDoc: options.singleDoc,
        quick: options.quick,
        title: options.title,
        author: options.author,
        language: options.language,
        verbose: options.verbose,
        timeout: options.timeout,
        sandbox: options.sandbox,
        executableChromium: options.executableChromium,
    }).catch(util_1.gracefulError);
}
catch (err) {
    util_1.gracefulError(err);
}
async function preview(cliFlags) {
    var _a, _b, _c;
    util_1.startLogging('Collecting preview config');
    const loadedConf = config_1.collectVivliostyleConfig(cliFlags);
    const { vivliostyleConfig, vivliostyleConfigPath } = loadedConf;
    cliFlags = loadedConf.cliFlags;
    const context = vivliostyleConfig
        ? upath_1.default.dirname(vivliostyleConfigPath)
        : util_1.cwd;
    let config = await config_1.mergeConfig(cliFlags, vivliostyleConfig, context);
    util_1.startLogging('Preparing preview');
    // build artifacts
    if (config.manifestPath) {
        await builder_1.compile(config);
        await builder_1.copyAssets(config);
    }
    const url = server_1.getBrokerUrl({
        sourceIndex: ((_b = (_a = config.manifestPath) !== null && _a !== void 0 ? _a : config.webbookEntryPath) !== null && _b !== void 0 ? _b : config.epubOpfPath),
        outputSize: config.size,
        style: config.customStyle,
        userStyle: config.customUserStyle,
        singleDoc: config.singleDoc,
        quick: config.quick,
    });
    util_1.debug(`Executing Chromium path: ${config.executableChromium}`);
    const executableChromium = (_c = cliFlags.executableChromium) !== null && _c !== void 0 ? _c : browser_1.getExecutableBrowserPath();
    if (!browser_1.checkBrowserAvailability(executableChromium)) {
        const puppeteerDir = upath_1.default.dirname(require.resolve('puppeteer-core/package.json'));
        if (!upath_1.default.relative(puppeteerDir, executableChromium).startsWith('..')) {
            // The browser on puppeteer-core isn't downloaded first time starting CLI so try to download it
            await browser_1.downloadBrowser();
        }
        else {
            // executableChromium seems to be specified explicitly
            throw new Error(`Cannot find the browser. Please check the executable chromium path: ${executableChromium}`);
        }
    }
    const browser = await browser_1.launchBrowser({
        headless: false,
        executablePath: config.executableChromium,
        args: [
            '--allow-file-access-from-files',
            config.sandbox ? '' : '--no-sandbox',
            '--disable-web-security',
        ],
    });
    const page = await browser.newPage();
    await page.setViewport({ width: 0, height: 0 });
    await page.goto(url);
    util_1.stopLogging('Up and running ([ctrl+c] to quit)', 'ðŸš€');
    function reloadConfig(path) {
        clearTimeout(timer);
        timer = setTimeout(async () => {
            util_1.startLogging(`Config file change detected. Reloading ${path}`);
            // reload vivliostyle config
            const loadedConf = config_1.collectVivliostyleConfig(cliFlags);
            const { vivliostyleConfig } = loadedConf;
            config = await config_1.mergeConfig(cliFlags, vivliostyleConfig, context);
            // build artifacts
            if (config.manifestPath) {
                await builder_1.compile(config, { reload: true });
                await builder_1.copyAssets(config);
            }
            page.reload();
            util_1.logSuccess(`Reloaded ${path}`);
        }, 2000);
    }
    function handleChangeEvent(path) {
        clearTimeout(timer);
        timer = setTimeout(async () => {
            util_1.startLogging(`Rebuilding ${path}`);
            // build artifacts
            if (config.manifestPath) {
                await builder_1.compile(config, { reload: true });
                await builder_1.copyAssets(config);
            }
            page.reload();
            util_1.logSuccess(`Built ${path}`);
        }, 2000);
    }
    if (util_1.isUrlString(config.input.entry)) {
        return;
    }
    chokidar_1.default
        .watch('**', {
        ignored: (path) => {
            if (/^node_modules$|^\.git/.test(upath_1.default.basename(path))) {
                return true;
            }
            if (config.entryContextDir !== config.workspaceDir &&
                util_1.pathStartsWith(path, config.workspaceDir)) {
                return true; // ignore saved intermediate files
            }
            if (config.manifestAutoGenerate && path === config.manifestPath) {
                return true; // ignore generated pub-manifest
            }
            if (config.entries.length &&
                /\.(md|markdown|html?|xhtml|xht)$/i.test(path) &&
                !config.entries.find((entry) => path === entry.source)) {
                return true; // ignore md or html files not in entries source
            }
            if (config.themeIndexes.find((theme) => (theme.type === 'file' || theme.type === 'package') &&
                theme.destination !== theme.location &&
                (theme.type === 'file'
                    ? path === theme.destination
                    : util_1.pathStartsWith(path, theme.destination)))) {
                return true; // ignore copied theme files
            }
            return false;
        },
        cwd: config.entries.length ? context : config.entryContextDir,
    })
        .on('all', (event, path) => {
        if (upath_1.default.join(config.entryContextDir, path) === config.input.entry ||
            /\.(md|markdown|html?|xhtml|xht|css|jpe?g|png|gif|svg)$/i.test(path)) {
            handleChangeEvent(path);
        }
        else if (path === upath_1.default.basename(vivliostyleConfigPath)) {
            reloadConfig(path);
        }
    });
}
exports.default = preview;
//# sourceMappingURL=preview.js.map