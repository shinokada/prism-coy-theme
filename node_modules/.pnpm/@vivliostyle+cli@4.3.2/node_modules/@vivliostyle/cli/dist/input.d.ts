interface InputFormatTrait<T extends string = string> {
    format: T;
}
/** A single file of Markdown */
export interface SingleMarkdownInput extends InputFormatTrait<'markdown'> {
    entry: string;
}
/** A single file of (X)HTML */
export interface SingleHtmlInput extends InputFormatTrait<'html'> {
    entry: string;
}
/** A series of (X)HTML files which files are referred in entry (X)HTML */
export interface WebbookInput extends InputFormatTrait<'webbook'> {
    entry: string;
}
/** A JSON manifest file of W3C Web Publication or Readium Web Publication */
export interface PubManifestInput extends InputFormatTrait<'pub-manifest'> {
    entry: string;
}
/** An EPUB file (zipped) */
export interface EpubInput extends InputFormatTrait<'epub'> {
    entry: string;
}
/** An OPF file of unzipped EPUBs */
export interface EpubOpfInput extends InputFormatTrait<'epub-opf'> {
    entry: string;
}
export declare type InputFormat = SingleMarkdownInput | SingleHtmlInput | WebbookInput | PubManifestInput | EpubInput | EpubOpfInput;
export declare function detectInputFormat(entry: string): InputFormat;
export declare const manuscriptMediaTypes: readonly ["text/markdown", "text/html", "application/xhtml+xml"];
export declare type ManuscriptMediaType = typeof manuscriptMediaTypes[number];
export declare function detectManuscriptMediaType(entry: string): ManuscriptMediaType;
export {};
//# sourceMappingURL=input.d.ts.map