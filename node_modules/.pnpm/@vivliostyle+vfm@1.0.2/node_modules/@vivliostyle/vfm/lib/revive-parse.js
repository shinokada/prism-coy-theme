"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.reviveParse = void 0;
var remark_breaks_1 = __importDefault(require("remark-breaks"));
var remark_frontmatter_1 = __importDefault(require("remark-frontmatter"));
var remark_parse_1 = __importDefault(require("remark-parse"));
var attr_1 = require("./plugins/attr");
var code_1 = require("./plugins/code");
var footnotes_1 = require("./plugins/footnotes");
var math_1 = require("./plugins/math");
var ruby_1 = require("./plugins/ruby");
var section_1 = require("./plugins/section");
var slug_1 = require("./plugins/slug");
var toc_1 = require("./plugins/toc");
var utils_1 = require("./utils");
/**
 * Create Markdown AST parsers.
 * @param hardLineBreaks Add `<br>` at the position of hard line breaks, without needing spaces..
 * @param enableMath Enable math syntax.
 * @returns Parsers.
 */
var reviveParse = function (hardLineBreaks, enableMath) { return __spreadArray(__spreadArray(__spreadArray([
    [remark_parse_1.default, { gfm: true, commonmark: true }]
], (hardLineBreaks ? [remark_breaks_1.default] : [])), (enableMath ? [math_1.mdast] : [])), [
    ruby_1.mdast,
    footnotes_1.mdast,
    attr_1.mdast,
    slug_1.mdast,
    section_1.mdast,
    code_1.mdast,
    toc_1.mdast,
    remark_frontmatter_1.default,
    utils_1.inspect('mdast'),
]); };
exports.reviveParse = reviveParse;
