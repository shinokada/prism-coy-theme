"use strict";
/**
 * derived from `remark-sectionize`.
 * original: 2019 Jake Low
 * modified: 2020 Yasuaki Uechi, 2021 and later is Akabeko
 * @license MIT
 * @see https://github.com/jake-low/remark-sectionize
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mdast = void 0;
var unist_util_find_after_1 = __importDefault(require("unist-util-find-after"));
var unist_util_visit_parents_1 = __importDefault(require("unist-util-visit-parents"));
/** Maximum depth of hierarchy to process headings. */
var MAX_HEADING_DEPTH = 6;
/**
 * Check the heading properties to generate properties for the parent `<section>` and update the heading style.
 * @param node Node of Markdown AST.
 * @returns Properties.
 */
var checkProperties = function (node, depth) {
    var _a;
    if (!((_a = node.data) === null || _a === void 0 ? void 0 : _a.hProperties)) {
        return undefined;
    }
    // Remove `id` attribute and copy otherwise for the parent `<section>`
    var hProperties = __assign({}, node.data.hProperties);
    if (node.data.hProperties.id) {
        delete node.data.hProperties.id;
    }
    // {hidden} specifier
    if (Object.keys(hProperties).includes('hidden')) {
        node.data.hProperties.hidden = 'hidden';
    }
    // output section levels like Pandoc
    if (Array.isArray(hProperties.class)) {
        // Switch references as they do not affect the heading,
        // and `remark-attr` may add classes, so make sure they come before them (always top)
        var classes = __spreadArray([], hProperties.class);
        classes.unshift("level" + depth);
        hProperties.class = classes;
    }
    else {
        hProperties.class = ["level" + depth];
    }
    return hProperties;
};
/**
 * Wrap the header in sections.
 * - Do not sectionize if parent is `blockquote`.
 * - The attributes of the heading are basically copied to the section.
 * - The `id` attribute is moved to the section.
 * - The `hidden` attribute is not copied and only the heading applies.
 * - Set the `levelN` class in the section to match the heading depth.
 * @param node Node of Markdown AST.
 * @param ancestors Parents.
 * @todo handle `@subtitle` properly.
 */
var sectionize = function (node, ancestors) {
    var _a;
    var parent = ancestors[ancestors.length - 1];
    if (parent.type === 'blockquote') {
        return;
    }
    var start = node;
    var depth = start.depth;
    var isEnd = function (node) {
        return (node.type === 'heading' && node.depth <= depth) || node.type === 'export';
    };
    var end = unist_util_find_after_1.default(parent, start, isEnd);
    var startIndex = parent.children.indexOf(start);
    var endIndex = parent.children.indexOf(end);
    var between = parent.children.slice(startIndex, endIndex > 0 ? endIndex : undefined);
    var hProperties = checkProperties(node, depth);
    var isDuplicated = parent.type === 'section';
    if (isDuplicated) {
        if ((_a = parent.data) === null || _a === void 0 ? void 0 : _a.hProperties) {
            parent.data.hProperties = __assign(__assign({}, parent.data.hProperties), hProperties);
        }
        return;
    }
    var type = 'section';
    var section = {
        type: type,
        data: {
            hName: type,
            hProperties: hProperties,
        },
        depth: depth,
        children: between,
    };
    parent.children.splice(startIndex, section.children.length, section);
};
/**
 * Process Markdown AST.
 * @returns Transformer.
 */
var mdast = function () { return function (tree) {
    var _loop_1 = function (depth) {
        unist_util_visit_parents_1.default(tree, function (node) {
            return node.type === 'heading' && node.depth === depth;
        }, sectionize);
    };
    for (var depth = MAX_HEADING_DEPTH; depth > 0; depth--) {
        _loop_1(depth);
    }
}; };
exports.mdast = mdast;
