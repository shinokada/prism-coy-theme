"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hast = void 0;
var hast_util_is_element_1 = __importDefault(require("hast-util-is-element"));
var hastscript_1 = __importDefault(require("hastscript"));
var unist_util_visit_1 = __importDefault(require("unist-util-visit"));
/**
 * Check if the specified property is `<img>` specific.
 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#the-img-element
 * @param name Property name.
 * @returns If the specified property is `true`.
 */
var isImgProperty = function (name) {
    switch (name) {
        case 'alt':
        case 'src':
        case 'srcset':
        case 'sizes':
        case 'crossorigin':
        case 'usemap':
        case 'ismap':
        case 'width':
        case 'height':
        case 'referrerpolicy':
        case 'decoding':
        case 'loading':
            return true;
        default:
            return false;
    }
};
/**
 * Wrap the single line `<img>` in `<figure>` and generate `<figcaption>` from the `alt` attribute.
 *
 * A single line `<img>` is a child of `<p>` with no sibling elements. Also, `<figure>` cannot be a child of `<p>`. So convert the parent `<p>` to `<figure>`.
 *
 * Also, of the attributes of `<img>`,` id` is moved to `<figure>`, and the others are copied except for `<img>` specific (such as `src`).
 * @param img `<img>` tag.
 * @param parent `<p>` tag.
 */
var wrapFigureImg = function (img, parent) {
    if (!(img.properties && parent.properties)) {
        return;
    }
    parent.tagName = 'figure';
    parent.children.push(hastscript_1.default('figcaption', { 'aria-hidden': 'true' }, [img.properties.alt]));
    // Move to parent because `id` attribute is unique
    if (img.properties.id) {
        parent.properties.id = img.properties.id;
        delete img.properties.id;
    }
    for (var _i = 0, _a = Object.keys(img.properties); _i < _a.length; _i++) {
        var key = _a[_i];
        if (!isImgProperty(key)) {
            parent.properties[key] = img.properties[key];
        }
    }
};
var hast = function () { return function (tree) {
    unist_util_visit_1.default(tree, 'element', function (node, index, parent) {
        var _a, _b;
        // handle captioned code block
        var maybeCode = (_a = node.children) === null || _a === void 0 ? void 0 : _a[0];
        if (hast_util_is_element_1.default(node, 'pre') &&
            (maybeCode === null || maybeCode === void 0 ? void 0 : maybeCode.properties) &&
            maybeCode.properties.title) {
            var maybeTitle = maybeCode.properties.title;
            delete maybeCode.properties.title;
            if (Array.isArray(maybeCode.properties.className)) {
                parent.children[index] = hastscript_1.default('figure', { class: maybeCode.properties.className[0] }, hastscript_1.default('figcaption', maybeTitle), node);
            }
            return;
        }
        // handle captioned and single line (like a block) img
        if (hast_util_is_element_1.default(node, 'img') &&
            ((_b = node.properties) === null || _b === void 0 ? void 0 : _b.alt) &&
            parent &&
            parent.tagName === 'p' &&
            parent.children.length === 1) {
            wrapFigureImg(node, parent);
        }
    });
}; };
exports.hast = hast;
